#3.1Clean dataset, provide density function plot of the life expectancy, provide box plot of the life expectancy, 
#descibe the 5 number summary statistics obtained.library(readr)
library(ggplot2)
library(dplyr)

le_data <- read_csv("R Studio/Life_Expectancy_Data.csv")
View(le_data)

# 1. Data Cleaning
# Checking for any missing values and removing them 
missing_data <- sum(is.na(le_data))
if (missing_data > 0) {
  le_data<- na.omit(le_data)
  cat("Removed", missing_data, "rows with missing data.\n")
}

# 2. Density Function Plot of Life Expectancy
ggplot(le_data, aes(x = `Life expectancy`)) +
  geom_density(fill = "pink", alpha = 0.6) +
  labs(title = "Density Plot of Life Expectancy Across All Countries", x = "Life Expectancy")

# 3. Box Plot of Life Expectancy
ggplot(le_data, aes(y = `Life expectancy`)) +
  geom_boxplot(fill = "pink") +
  labs(title = "Box Plot of Life Expectancy Across All Countries", y = "Life Expectancy")

# Five-number summary statistics
summary(le_data$`Life expectancy`)


Plots : 
A density function plot of the life expectancy across all countries :

A box plot of the life expectancy data across countries : 

The five-number summary statistics obtained : 

Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
   44.0    64.4    71.7    69.3    75.0    89.0 

Min: The minimum value of the life expectancy is 44 years. This is the lowest life expectancy that was recorded in the data

1st Qu. (Quartile): The value is 64.4. 25% of the data points (participants) have a life expectancy of less than or equal to 64.4 years. 

Median/50th percentile: The value is 71.7. The middle value of the data under the life expectancy variable is 71.7 years. 

Mean/Average : The value is 69.3. The average age for the life expectancy values which is most likely the average age that people live until according to the data collected. 

3rd Qu. : The third quartile value is 75.75% of the data points (participants) have a life expectancy less than or equal to 75 years. 

Max: The maximum/highest value recorded is 89.The oldest person to have their data collected has a life expectancy of 89 years. 


average_life_expectancy <- le_data %>%
  group_by(Country) %>%
  summarise(Avg_Life_Expectancy = mean(`Life expectancy`)) %>%
  arrange(desc(Avg_Life_Expectancy))

ggplot(average_life_expectancy, aes(x = reorder(Country, -Avg_Life_Expectancy), y = Avg_Life_Expectancy)) +
  geom_bar(stat = "identity", fill = "lightgreen") +
  labs(title = "Average Life Expectancy Across Countries", x = "Country", y = "Average Life Expectancy") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))


3.2 Bar chart of the average life expectancy across all countries in descending order 
average_life_expectancy <- le_data %>%
  group_by(Country) %>%
  summarise(Avg_Life_Expectancy = mean(`Life expectancy`)) %>%
  arrange(desc(Avg_Life_Expectancy))

ggplot(average_life_expectancy, aes(x = reorder(Country, -Avg_Life_Expectancy), y = Avg_Life_Expectancy)) +
  geom_bar(stat = "identity", fill = "lightgreen") +
  labs(title = "Average Life Expectancy Across Countries", x = "Country", y = "Average Life Expectancy") +
  theme(axis.text.x = element_text(angle = 90, hjust = 1))


#3.3 Generate a correlation matrix using relevant measures and testing to select statistically significant variables on life expectancy
#Mention the variables. Elaborate on the correlation measure used, HT done and relationship
#btw predicting variable and life expectancy
# Correlation Matrix
correlation_matrix <- cor(le_data[, 4:ncol(le_data)])
print(correlation_matrix)

# Variables Contributing to Life Expectancy
correlation_with_life_expectancy <- correlation_matrix[, 1]
significant_variables <- names(which(abs(correlation_with_life_expectancy) > 0.2))
cat("Significant variables contributing to life expectancy:\n")
print(significant_variables)


#3.4 Build LR model on 80/20 data of the relevant variables. Train using LR 10-fold cross validation.
#Get R2 score and best model on the train and test.
library(caret)

# Split data into 80/20 training and test sets
set.seed(123) 
train_indices <- createDataPartition(le_data$`Life expectancy`, p = 0.8, list = FALSE)
train_data <- le_data[train_indices, ]
test_data <- le_data[-train_indices, ]

# linear regression model
lm_model <- lm(`Life expectancy` ~ ., data = train_data)

# Train the model using 10-fold cross-validation
lm_cv <- train(`Life expectancy` ~ ., data = train_data, method = "lm", trControl = trainControl(method = "cv", number = 10))

# Coefficient of determination plots and R-scores
plot(lm_model, which = 1) # Residuals vs. Fitted
plot(lm_model, which = 2) # Normal Q-Q
plot(lm_model, which = 5) # Cook's distance

# R-squared score on training and test sets
train_r_squared <- summary(lm_model)$r.squared
test_r_squared <- cor(predict(lm_model, newdata = test_data), test_data$`Life expectancy`)^2
cat("Training R-squared:", train_r_squared, "\n")
cat("Test R-squared:", test_r_squared, "\n")


#3.5 Perform 2D clustering using k-means and silhoutte method to find existing clusters based on their GDP and life expectancy 
#attributes. Present your data graphically and elaborate on findings.
library(cluster)

# Select relevant attributes
clustering_data <- le_data[, c("GDP", "Life expectancy")]

# Silhouette method
silhouette_scores <- c()
for (k in 2:10) {  # You can adjust the range of k as needed
  kmeans_model <- kmeans(clustering_data, centers = k)
  silhouette_scores <- c(silhouette_scores, mean(silhouette(kmeans_model$cluster, dist(clustering_data))))
}

# Plot the Silhouette scores for different values of k
plot(2:10, silhouette_scores, type = "b", pch = 19, xlab = "Number of Clusters (k)", ylab = "Average Silhouette Score")

# Determine the optimal number of clusters based on the highest Silhouette score
optimal_k <- which.max(silhouette_scores) + 1  # Adding 1 to get the actual k value

# Perform k-Means clustering with the optimal number of clusters
set.seed(123)  # for reproducibility
kmeans_model <- kmeans(clustering_data, centers = optimal_k)

# Plot the clustering results
plot(clustering_data, col = kmeans_model$cluster, pch = 19, main = "k-Means Clustering (Optimal k)")



